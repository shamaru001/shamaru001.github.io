{"version":3,"sources":["Components/Header/Header.tsx","Components/AboutMe/AboutMe.tsx","Components/SocialNetworks/SocialNetworks.tsx","Components/Home/Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","id","className","href","AboutMe","SocialNetworks","Home","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0RAwBeA,G,gBArBU,WACrB,OACI,4BAAQC,GAAG,UACP,6BAASA,GAAG,SACR,4DAEJ,yBAAKA,GAAG,QACJ,yBAAKC,UAAU,aACX,uBAAGC,KAAK,cAAR,cAEJ,yBAAKD,UAAU,aACX,uBAAGC,KAAK,SAAR,SAEJ,yBAAKD,UAAU,aACX,uBAAGC,KAAK,YAAR,gBCALC,G,YAdW,WACtB,OACI,6BAASH,GAAG,YACR,2BACI,mEACA,6BAFJ,mEAII,6BAJJ,0ECiBGI,G,MAnBkB,WAC7B,OACI,yBAAKJ,GAAG,mBACJ,yBAAKC,UAAU,MACX,uBAAGC,KAAK,4CAA2C,0CAAnD,MAEJ,yBAAKD,UAAU,MACX,uBAAGC,KAAK,kCAAiC,yCAAzC,MAEJ,yBAAKD,UAAU,MACX,uBAAGC,KAAK,+CAA8C,0CAAtD,MAEJ,yBAAKD,UAAU,MACX,uBAAGC,KAAK,iCAAgC,wCAAxC,SCCDG,EAbQ,WACnB,OACI,6BAASL,GAAG,QACR,yBAAKA,GAAG,SACJ,kBAAC,EAAD,OAEJ,yBAAKA,GAAG,gBACJ,kBAAC,EAAD,SCGDM,EATO,WACpB,OACI,kBAAC,WAAD,KACI,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDoI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9c0eb0ea.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\n\nconst Header: React.FC = () => {\n    return (\n        <header id=\"header\">\n            <section id=\"title\">\n                <span> WELCOME TO MY PORTFOLIO </span>\n            </section>\n            <nav id=\"menu\">\n                <div className=\"menu_item\">\n                    <a href=\"#portfolio\">PORTFOLIO</a>\n                </div>\n                <div className=\"menu_item\">\n                    <a href=\"#blog\">BLOG</a>\n                </div>\n                <div className=\"menu_item\">\n                    <a href=\"#contact\">CONTACT</a>\n                </div>\n            </nav>\n        </header>\n    );\n};\n\nexport default Header;\n","import React from 'react';\nimport './AboutMe.css'\n\nconst AboutMe: React.FC = () => {\n    return (\n        <section id=\"about_me\">\n            <p>\n                <h2>Hi! I'm a Full-Stack Web Developer.</h2>\n                <br />\n                I love programmer & always I'm searching something new to learn.\n                <br />\n                why being up to date is the challenge of each person in IT industry\n            </p>\n        </section>\n    );\n};\n\nexport default AboutMe;\n","import React from 'react';\nimport './SocialNetworks.css';\n\n\nconst SocialNetworks: React.FC = () => {\n    return (\n        <div id=\"social_networks\">\n            <div className=\"sn\">\n                <a href=\"https://www.facebook.com/shamaru.primera\"><span>Facebook</span> </a>\n            </div>\n            <div className=\"sn\">\n                <a href=\"https://twitter.com/shamaru_01\"><span>Twitter</span> </a>\n            </div>\n            <div className=\"sn\">\n                <a href=\"https://www.linkedin.com/in/shamaruprimera/\"><span>LinkedIn</span> </a>\n            </div>\n            <div className=\"sn\">\n                <a href=\"https://github.com/shamaru001\"><span>Github</span> </a>\n            </div>\n        </div>\n    );\n};\n\nexport default SocialNetworks;\n","import React from 'react';\nimport './Home.css'\nimport AboutMe from \"../AboutMe/AboutMe\";\nimport SocialNetworks from \"../SocialNetworks/SocialNetworks\";\n\nconst Home: React.FC = () => {\n    return (\n        <section id=\"home\">\n            <div id=\"about\">\n                <AboutMe />\n            </div>\n            <div id=\"social_media\">\n                <SocialNetworks />\n            </div>\n        </section>\n    );\n};\n\nexport default Home;\n","import React, { Fragment } from 'react';\nimport './App.css';\nimport 'normalize.css';\nimport Header from \"./Components/Header/Header\";\nimport Home from \"./Components/Home/Home\";\n\nconst App: React.FC = () => {\n  return (\n      <Fragment>\n          <Header />\n          <Home />\n      </Fragment>\n  )\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}